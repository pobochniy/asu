// <auto-generated />
using System;
using Atheneum.EntityDeployment;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atheneum.MigrationsDeployment
{
    [DbContext(typeof(DeploymentContext))]
    partial class DeploymentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Atheneum.EntityDeployment.DeploymentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DockerImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("DeploymentLogs");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.DeploymentServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Ip")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SshPassword")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SshUser")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.ImagesMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DockerHubAccount")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DockerHubRepository")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DockerTag")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GitHubUser")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DockerHubImages");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.KeyVault", b =>
                {
                    b.Property<Guid>("ServerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Vault")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ServerId", "Key");

                    b.ToTable("KeyVaults");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.TrustedUser", b =>
                {
                    b.Property<Guid>("ServerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ServerId", "UserId");

                    b.ToTable("TrustedUsers");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.DeploymentLog", b =>
                {
                    b.HasOne("Atheneum.EntityDeployment.DeploymentServer", "Server")
                        .WithMany("Logs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atheneum.EntityDeployment.ImagesMetadata", "DockerImage")
                        .WithMany("Logs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DockerImage");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.KeyVault", b =>
                {
                    b.HasOne("Atheneum.EntityDeployment.DeploymentServer", "Server")
                        .WithMany("KeyVaults")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.TrustedUser", b =>
                {
                    b.HasOne("Atheneum.EntityDeployment.DeploymentServer", "Server")
                        .WithMany("TrustedUsers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.DeploymentServer", b =>
                {
                    b.Navigation("KeyVaults");

                    b.Navigation("Logs");

                    b.Navigation("TrustedUsers");
                });

            modelBuilder.Entity("Atheneum.EntityDeployment.ImagesMetadata", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
